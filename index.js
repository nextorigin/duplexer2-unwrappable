// Generated by CoffeeScript 1.10.0
"use strict";
var DuplexWrapper, stream,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

stream = require("readable-stream");

DuplexWrapper = (function(superClass) {
  extend(DuplexWrapper, superClass);

  function DuplexWrapper(options, writable, readable) {
    this.bubbleError = bind(this.bubbleError, this);
    this.pushNull = bind(this.pushNull, this);
    this.readIfWaiting = bind(this.readIfWaiting, this);
    this._endWritable = bind(this._endWritable, this);
    this._end = bind(this._end, this);
    this.unbind = bind(this.unbind, this);
    if (typeof readable === "undefined") {
      readable = writable;
      writable = options;
      options = {};
    }
    DuplexWrapper.__super__.constructor.call(this, options);
    if (typeof readable.read !== "function") {
      readable = (new stream.Readable(options)).wrap(readable);
    }
    this._writable = writable;
    this._readable = readable;
    this._waiting = false;
    this.bindEvents(options);
  }

  DuplexWrapper.prototype.bindEvents = function(arg) {
    var bubbleErrors;
    bubbleErrors = arg.bubbleErrors;
    this._writable.once("finish", this._end);
    this.once("finish", this._endWritable);
    this._readable.on("readable", this.readIfWaiting);
    this._readable.once("end", this.pushNull);
    if (!(bubbleErrors || (bubbleErrors == null))) {
      return;
    }
    this._writable.on("error", this.bubbleError);
    return this._readable.on("error", this.bubbleError);
  };

  DuplexWrapper.prototype.unbind = function() {
    this._writable.removeListener("finish", this._end);
    this.removeListener("finish", this._endWritable);
    this._readable.removeListener("readable", this.readIfWaiting);
    this._readable.removeListener("end", this.pushNull);
    this._writable.removeListener("error", this.bubbleError);
    return this._readable.removeListener("error", this.bubbleError);
  };

  DuplexWrapper.prototype._end = function() {
    return this.end();
  };

  DuplexWrapper.prototype._endWritable = function() {
    return this._writable.end();
  };

  DuplexWrapper.prototype.readIfWaiting = function() {
    if (!this._waiting) {
      return;
    }
    this._waiting = false;
    return this._read();
  };

  DuplexWrapper.prototype.pushNull = function() {
    return this.push(null);
  };

  DuplexWrapper.prototype.bubbleError = function(err) {
    return this.emit("error", err);
  };

  DuplexWrapper.prototype._write = function(input, encoding, done) {
    return this._writable.write(input, encoding, done);
  };

  DuplexWrapper.prototype._read = function() {
    var buf, reads;
    buf = void 0;
    reads = 0;
    while ((buf = this._readable.read()) !== null) {
      this.push(buf);
      reads++;
    }
    if (reads === 0) {
      return this._waiting = true;
    }
  };

  return DuplexWrapper;

})(stream.Duplex);

module.exports = DuplexWrapper;

//# sourceMappingURL=index.js.map
